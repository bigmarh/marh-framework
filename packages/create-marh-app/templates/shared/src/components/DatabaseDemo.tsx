/**
 * Database Demo Component
 * 
 * Demonstrates the MARH database system with real-world examples.
 * Shows CRUD operations, queries, and adapter-specific features.
 */

import { m, MarhComponent } from '@marh/core';
import { databaseService } from '../services/database.service';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: 'admin' | 'user' | 'guest';
  isActive: boolean;
  lastLoginAt?: Date;
  createdAt: Date;
  updatedAt: Date;
}

interface Post {
  id: string;
  title: string;
  content: string;
  authorId: string;
  status: 'draft' | 'published' | 'archived';
  publishedAt?: Date;
  createdAt: Date;
  updatedAt: Date;
}

interface DatabaseStats {
  isConnected: boolean;
  platform: string;
  databaseType: string;
  tables: Array<{ name: string; rowCount: number; size: string }>;
  totalRecords: number;
  error?: string;
}

export const DatabaseDemo: MarhComponent = {\n  oninit() {\n    this.users = [];\n    this.posts = [];\n    this.stats = null;\n    this.loading = false;\n    this.error = null;\n    this.activeTab = 'overview';\n    this.showUserForm = false;\n    this.showPostForm = false;\n    this.editingUser = null;\n    this.editingPost = null;\n    \n    // User form\n    this.userForm = {\n      email: '',\n      firstName: '',\n      lastName: '',\n      role: 'user'\n    };\n    \n    // Post form\n    this.postForm = {\n      title: '',\n      content: '',\n      status: 'draft'\n    };\n    \n    this.loadData();\n  },\n\n  async loadData() {\n    this.loading = true;\n    this.error = null;\n    m.redraw();\n\n    try {\n      // Load users, posts, and stats in parallel\n      const [users, posts, stats] = await Promise.all([\n        databaseService.users.findMany({ \n          sort: { field: 'createdAt', direction: 'desc' },\n          pagination: { page: 1, limit: 10 }\n        }),\n        databaseService.posts.findMany({ \n          sort: { field: 'createdAt', direction: 'desc' },\n          pagination: { page: 1, limit: 5 }\n        }),\n        databaseService.getStats()\n      ]);\n      \n      this.users = users;\n      this.posts = posts;\n      this.stats = stats;\n    } catch (error: any) {\n      this.error = error.message;\n      console.error('Failed to load data:', error);\n    } finally {\n      this.loading = false;\n      m.redraw();\n    }\n  },\n\n  // User management\n  showAddUserForm() {\n    this.userForm = { email: '', firstName: '', lastName: '', role: 'user' };\n    this.editingUser = null;\n    this.showUserForm = true;\n  },\n\n  showEditUserForm(user: User) {\n    this.userForm = {\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role\n    };\n    this.editingUser = user;\n    this.showUserForm = true;\n  },\n\n  async saveUser() {\n    try {\n      if (this.editingUser) {\n        await databaseService.users.update(this.editingUser.id, this.userForm);\n      } else {\n        await databaseService.users.create(this.userForm);\n      }\n      \n      this.showUserForm = false;\n      await this.loadData();\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  async deleteUser(user: User) {\n    if (!confirm(`Delete user ${user.firstName} ${user.lastName}?`)) return;\n    \n    try {\n      await databaseService.users.delete(user.id);\n      await this.loadData();\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  async toggleUserStatus(user: User) {\n    try {\n      await databaseService.users.update(user.id, {\n        isActive: !user.isActive\n      });\n      await this.loadData();\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  // Post management\n  showAddPostForm() {\n    this.postForm = { title: '', content: '', status: 'draft' };\n    this.editingPost = null;\n    this.showPostForm = true;\n  },\n\n  showEditPostForm(post: Post) {\n    this.postForm = {\n      title: post.title,\n      content: post.content,\n      status: post.status\n    };\n    this.editingPost = post;\n    this.showPostForm = true;\n  },\n\n  async savePost() {\n    try {\n      if (!this.users[0]) {\n        this.error = 'No users available to assign as author';\n        return;\n      }\n      \n      const postData = {\n        ...this.postForm,\n        authorId: this.users[0].id, // Use first user as author\n        ...(this.postForm.status === 'published' && { publishedAt: new Date() })\n      };\n      \n      if (this.editingPost) {\n        await databaseService.posts.update(this.editingPost.id, postData);\n      } else {\n        await databaseService.posts.create(postData);\n      }\n      \n      this.showPostForm = false;\n      await this.loadData();\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  async deletePost(post: Post) {\n    if (!confirm(`Delete post \"${post.title}\"?`)) return;\n    \n    try {\n      await databaseService.posts.delete(post.id);\n      await this.loadData();\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  async publishPost(post: Post) {\n    try {\n      await databaseService.posts.update(post.id, {\n        status: 'published',\n        publishedAt: new Date()\n      });\n      await this.loadData();\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  // Database operations\n  async createBackup() {\n    try {\n      const backup = await databaseService.backup();\n      const blob = new Blob([backup], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      \n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `marh-database-backup-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n      \n      URL.revokeObjectURL(url);\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  async refreshStats() {\n    try {\n      this.stats = await databaseService.getStats();\n      m.redraw();\n    } catch (error: any) {\n      this.error = error.message;\n    }\n  },\n\n  view() {\n    return (\n      <div class=\"bg-white rounded-lg shadow-md p-6\">\n        <div class=\"flex justify-between items-center mb-6\">\n          <div>\n            <h3 class=\"text-xl font-semibold text-gray-800\">\n              Database System Demo\n            </h3>\n            <p class=\"text-sm text-gray-600\">\n              Platform: {this.stats?.platform} | Type: {this.stats?.databaseType} | \n              Status: {this.stats?.isConnected ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'}\n            </p>\n          </div>\n          <div class=\"flex gap-2\">\n            <button\n              class=\"px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\n              onclick={() => this.refreshStats()}\n            >\n              ðŸ”„ Refresh\n            </button>\n            <button\n              class=\"px-3 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\"\n              onclick={() => this.createBackup()}\n            >\n              ðŸ’¾ Backup\n            </button>\n          </div>\n        </div>\n\n        {/* Error Display */}\n        {this.error && (\n          <div class=\"bg-red-50 border border-red-200 rounded-md p-3 mb-4\">\n            <p class=\"text-red-600 text-sm\">{this.error}</p>\n            <button\n              class=\"text-red-500 text-xs underline\"\n              onclick={() => { this.error = null; }}\n            >\n              Dismiss\n            </button>\n          </div>\n        )}\n\n        {/* Tab Navigation */}\n        <div class=\"flex border-b mb-6\">\n          {['overview', 'users', 'posts'].map(tab => (\n            <button\n              key={tab}\n              class={`px-4 py-2 font-medium capitalize ${this.activeTab === tab\n                ? 'border-b-2 border-blue-500 text-blue-600'\n                : 'text-gray-500 hover:text-gray-700'\n              }`}\n              onclick={() => { this.activeTab = tab; }}\n            >\n              {tab}\n            </button>\n          ))}\n        </div>\n\n        {/* Overview Tab */}\n        {this.activeTab === 'overview' && (\n          <div class=\"space-y-6\">\n            {/* Database Stats */}\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div class=\"bg-gray-50 rounded-lg p-4\">\n                <h4 class=\"font-medium text-gray-800 mb-2\">Total Records</h4>\n                <p class=\"text-2xl font-bold text-blue-600\">\n                  {this.stats?.totalRecords || 0}\n                </p>\n              </div>\n              <div class=\"bg-gray-50 rounded-lg p-4\">\n                <h4 class=\"font-medium text-gray-800 mb-2\">Tables</h4>\n                <p class=\"text-2xl font-bold text-green-600\">\n                  {this.stats?.tables?.length || 0}\n                </p>\n              </div>\n              <div class=\"bg-gray-50 rounded-lg p-4\">\n                <h4 class=\"font-medium text-gray-800 mb-2\">Database Type</h4>\n                <p class=\"text-lg font-medium text-purple-600\">\n                  {this.stats?.databaseType || 'Unknown'}\n                </p>\n              </div>\n            </div>\n\n            {/* Table Details */}\n            {this.stats?.tables && this.stats.tables.length > 0 && (\n              <div>\n                <h4 class=\"font-medium text-gray-800 mb-3\">Table Statistics</h4>\n                <div class=\"overflow-x-auto\">\n                  <table class=\"min-w-full border border-gray-200\">\n                    <thead class=\"bg-gray-50\">\n                      <tr>\n                        <th class=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">Table</th>\n                        <th class=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">Records</th>\n                        <th class=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">Size</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.stats.tables.map(table => (\n                        <tr key={table.name} class=\"border-t\">\n                          <td class=\"px-4 py-2 text-sm text-gray-900\">{table.name}</td>\n                          <td class=\"px-4 py-2 text-sm text-gray-600\">{table.rowCount}</td>\n                          <td class=\"px-4 py-2 text-sm text-gray-600\">{table.size}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            )}\n\n            {/* Features */}\n            <div>\n              <h4 class=\"font-medium text-gray-800 mb-3\">Database Features</h4>\n              <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div class=\"space-y-2\">\n                  <p>âœ… <strong>CRUD Operations:</strong> Create, Read, Update, Delete</p>\n                  <p>âœ… <strong>Query Builder:</strong> Fluent query interface</p>\n                  <p>âœ… <strong>Migrations:</strong> Schema versioning</p>\n                  <p>âœ… <strong>Relationships:</strong> Foreign key support</p>\n                </div>\n                <div class=\"space-y-2\">\n                  <p>âœ… <strong>Pagination:</strong> Efficient data loading</p>\n                  <p>âœ… <strong>Validation:</strong> Data integrity</p>\n                  <p>âœ… <strong>Transactions:</strong> Atomic operations</p>\n                  <p>âœ… <strong>Adapters:</strong> Multiple backends</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Users Tab */}\n        {this.activeTab === 'users' && (\n          <div>\n            <div class=\"flex justify-between items-center mb-4\">\n              <h4 class=\"font-medium text-gray-800\">Users ({this.users.length})</h4>\n              <button\n                class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                onclick={() => this.showAddUserForm()}\n              >\n                + Add User\n              </button>\n            </div>\n\n            {this.loading ? (\n              <div class=\"text-center py-8\">\n                <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p class=\"text-gray-600 mt-2\">Loading users...</p>\n              </div>\n            ) : this.users.length === 0 ? (\n              <div class=\"text-center py-8 text-gray-500\">\n                No users found. Create your first user!\n              </div>\n            ) : (\n              <div class=\"space-y-3\">\n                {this.users.map(user => (\n                  <div key={user.id} class=\"border rounded-lg p-4 hover:bg-gray-50\">\n                    <div class=\"flex justify-between items-start\">\n                      <div class=\"flex-1\">\n                        <div class=\"flex items-center gap-2\">\n                          <h5 class=\"font-medium text-gray-900\">\n                            {user.firstName} {user.lastName}\n                          </h5>\n                          <span class={`px-2 py-1 rounded text-xs ${\n                            user.role === 'admin' ? 'bg-red-100 text-red-700' :\n                            user.role === 'user' ? 'bg-blue-100 text-blue-700' :\n                            'bg-gray-100 text-gray-700'\n                          }`}>\n                            {user.role}\n                          </span>\n                          <span class={`px-2 py-1 rounded text-xs ${\n                            user.isActive ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'\n                          }`}>\n                            {user.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </div>\n                        <p class=\"text-sm text-gray-600\">{user.email}</p>\n                        <p class=\"text-xs text-gray-500\">\n                          Created: {new Date(user.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div class=\"flex gap-2\">\n                        <button\n                          class=\"px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200\"\n                          onclick={() => this.toggleUserStatus(user)}\n                        >\n                          {user.isActive ? 'Deactivate' : 'Activate'}\n                        </button>\n                        <button\n                          class=\"px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n                          onclick={() => this.showEditUserForm(user)}\n                        >\n                          Edit\n                        </button>\n                        <button\n                          class=\"px-2 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200\"\n                          onclick={() => this.deleteUser(user)}\n                        >\n                          Delete\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Posts Tab */}\n        {this.activeTab === 'posts' && (\n          <div>\n            <div class=\"flex justify-between items-center mb-4\">\n              <h4 class=\"font-medium text-gray-800\">Posts ({this.posts.length})</h4>\n              <button\n                class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                onclick={() => this.showAddPostForm()}\n              >\n                + Add Post\n              </button>\n            </div>\n\n            {this.loading ? (\n              <div class=\"text-center py-8\">\n                <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p class=\"text-gray-600 mt-2\">Loading posts...</p>\n              </div>\n            ) : this.posts.length === 0 ? (\n              <div class=\"text-center py-8 text-gray-500\">\n                No posts found. Create your first post!\n              </div>\n            ) : (\n              <div class=\"space-y-4\">\n                {this.posts.map(post => (\n                  <div key={post.id} class=\"border rounded-lg p-4 hover:bg-gray-50\">\n                    <div class=\"flex justify-between items-start\">\n                      <div class=\"flex-1\">\n                        <div class=\"flex items-center gap-2 mb-2\">\n                          <h5 class=\"font-medium text-gray-900\">{post.title}</h5>\n                          <span class={`px-2 py-1 rounded text-xs ${\n                            post.status === 'published' ? 'bg-green-100 text-green-700' :\n                            post.status === 'draft' ? 'bg-yellow-100 text-yellow-700' :\n                            'bg-gray-100 text-gray-700'\n                          }`}>\n                            {post.status}\n                          </span>\n                        </div>\n                        <p class=\"text-sm text-gray-600 mb-2\">\n                          {post.content.substring(0, 150)}{post.content.length > 150 ? '...' : ''}\n                        </p>\n                        <p class=\"text-xs text-gray-500\">\n                          Created: {new Date(post.createdAt).toLocaleDateString()}\n                          {post.publishedAt && ` | Published: ${new Date(post.publishedAt).toLocaleDateString()}`}\n                        </p>\n                      </div>\n                      <div class=\"flex gap-2 ml-4\">\n                        {post.status === 'draft' && (\n                          <button\n                            class=\"px-2 py-1 text-xs bg-green-100 text-green-700 rounded hover:bg-green-200\"\n                            onclick={() => this.publishPost(post)}\n                          >\n                            Publish\n                          </button>\n                        )}\n                        <button\n                          class=\"px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n                          onclick={() => this.showEditPostForm(post)}\n                        >\n                          Edit\n                        </button>\n                        <button\n                          class=\"px-2 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200\"\n                          onclick={() => this.deletePost(post)}\n                        >\n                          Delete\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* User Form Modal */}\n        {this.showUserForm && (\n          <div class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div class=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n              <h4 class=\"text-lg font-semibold mb-4\">\n                {this.editingUser ? 'Edit User' : 'Add New User'}\n              </h4>\n              \n              <div class=\"space-y-4\">\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-1\">Email *</label>\n                  <input\n                    type=\"email\"\n                    value={this.userForm.email}\n                    oninput={(e: Event) => { this.userForm.email = (e.target as HTMLInputElement).value; }}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"user@example.com\"\n                  />\n                </div>\n                \n                <div class=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 mb-1\">First Name *</label>\n                    <input\n                      type=\"text\"\n                      value={this.userForm.firstName}\n                      oninput={(e: Event) => { this.userForm.firstName = (e.target as HTMLInputElement).value; }}\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  <div>\n                    <label class=\"block text-sm font-medium text-gray-700 mb-1\">Last Name *</label>\n                    <input\n                      type=\"text\"\n                      value={this.userForm.lastName}\n                      oninput={(e: Event) => { this.userForm.lastName = (e.target as HTMLInputElement).value; }}\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-1\">Role</label>\n                  <select\n                    value={this.userForm.role}\n                    onchange={(e: Event) => { this.userForm.role = (e.target as HTMLSelectElement).value as any; }}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"user\">User</option>\n                    <option value=\"admin\">Admin</option>\n                    <option value=\"guest\">Guest</option>\n                  </select>\n                </div>\n              </div>\n              \n              <div class=\"flex justify-end gap-2 mt-6\">\n                <button\n                  class=\"px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50\"\n                  onclick={() => { this.showUserForm = false; }}\n                >\n                  Cancel\n                </button>\n                <button\n                  class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                  onclick={() => this.saveUser()}\n                >\n                  {this.editingUser ? 'Update' : 'Create'}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Post Form Modal */}\n        {this.showPostForm && (\n          <div class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div class=\"bg-white rounded-lg p-6 w-full max-w-lg mx-4\">\n              <h4 class=\"text-lg font-semibold mb-4\">\n                {this.editingPost ? 'Edit Post' : 'Add New Post'}\n              </h4>\n              \n              <div class=\"space-y-4\">\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-1\">Title *</label>\n                  <input\n                    type=\"text\"\n                    value={this.postForm.title}\n                    oninput={(e: Event) => { this.postForm.title = (e.target as HTMLInputElement).value; }}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Post title\"\n                  />\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-1\">Content *</label>\n                  <textarea\n                    value={this.postForm.content}\n                    oninput={(e: Event) => { this.postForm.content = (e.target as HTMLTextAreaElement).value; }}\n                    rows={6}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Write your post content here...\"\n                  />\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n                  <select\n                    value={this.postForm.status}\n                    onchange={(e: Event) => { this.postForm.status = (e.target as HTMLSelectElement).value as any; }}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"draft\">Draft</option>\n                    <option value=\"published\">Published</option>\n                    <option value=\"archived\">Archived</option>\n                  </select>\n                </div>\n              </div>\n              \n              <div class=\"flex justify-end gap-2 mt-6\">\n                <button\n                  class=\"px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50\"\n                  onclick={() => { this.showPostForm = false; }}\n                >\n                  Cancel\n                </button>\n                <button\n                  class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                  onclick={() => this.savePost()}\n                >\n                  {this.editingPost ? 'Update' : 'Create'}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Usage Information */}\n        <div class=\"mt-8 bg-gray-50 rounded-lg p-4\">\n          <h5 class=\"font-medium text-gray-800 mb-2\">Database System Features</h5>\n          <div class=\"text-sm text-gray-600 space-y-1\">\n            <p>â€¢ <strong>Pluggable Adapters:</strong> Switch between Memory, REST API, SQLite, IndexedDB</p>\n            <p>â€¢ <strong>Platform Aware:</strong> Automatically selects best adapter for Desktop/PWA/Web</p>\n            <p>â€¢ <strong>Type Safe:</strong> Full TypeScript support with generic interfaces</p>\n            <p>â€¢ <strong>Query Builder:</strong> Fluent API for complex queries and relationships</p>\n            <p>â€¢ <strong>Migrations:</strong> Schema versioning with up/down migrations</p>\n            <p>â€¢ <strong>Real-time:</strong> Event system for change notifications</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};"