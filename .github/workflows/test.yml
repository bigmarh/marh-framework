name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test

    strategy:
      matrix:
        template: [desktop, pwa]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build framework
        run: npm run build

      - name: Create test app
        run: |
          npx create-marh-app test-${{ matrix.template }}-app --template=${{ matrix.template }} --no-install
          cd test-${{ matrix.template }}-app
          npm install

      - name: Test app build
        run: |
          cd test-${{ matrix.template }}-app
          npm run build

      - name: Test app linting
        run: |
          cd test-${{ matrix.template }}-app
          npm run lint

      - name: Run template-specific tests
        run: |
          cd test-${{ matrix.template }}-app
          npm run test
        env:
          NODE_ENV: test

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build framework
        run: npm run build

      - name: Create and start test app
        run: |
          npx create-marh-app e2e-test-app --template=pwa --no-install
          cd e2e-test-app
          npm install
          npm run build
          npm run preview &
          sleep 10

      - name: Run E2E tests
        run: npx playwright test
        env:
          CI: true

      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency check
        run: |
          npx license-checker --onlyAllow 'MIT;BSD;ISC;Apache-2.0;Unlicense' --excludePrivatePackages
        continue-on-error: true

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance
        continue-on-error: true

      - name: Benchmark framework overhead
        run: |
          cd packages/marh-core
          npm run benchmark
        continue-on-error: true

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@master
        if: env.SONAR_TOKEN != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check bundle size
        run: npm run analyze:bundle
        continue-on-error: true

      - name: Check for circular dependencies
        run: npx madge --circular --extensions ts,tsx src/
        continue-on-error: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, integration, security, quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build
        
      - name: Create Release Pull Request or Publish
        uses: changesets/action@v1
        with:
          publish: npm run release
          title: 'Release: New version'
          commit: 'Release new version'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, integration, security, quality]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Notify success
        if: needs.test.result == 'success' && needs.integration.result == 'success'
        run: |
          echo "✅ All tests passed!"
          echo "Test Results: ${{ needs.test.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Quality: ${{ needs.quality.result }}"

      - name: Notify failure
        if: needs.test.result == 'failure' || needs.integration.result == 'failure'
        run: |
          echo "❌ Tests failed!"
          echo "Test Results: ${{ needs.test.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          exit 1